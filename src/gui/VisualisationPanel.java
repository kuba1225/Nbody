/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import static gui.DataPanel.bodyNumber;
import static gui.DataPanel.duration;
import static gui.DataPanel.timeStep;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import static java.lang.Math.abs;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import logic.Nbody;
import logic.Observer;

/**
 *
 * @author Kuba
 */
public class VisualisationPanel extends javax.swing.JPanel implements Observer, ActionListener {
 
    int n = 5;
    private double[][] coordinates;//= new double[n][3]
    private Nbody nbody;
    private double xw;
    private double yw;
    boolean start = false;

    private double[][] coordinates2D = new double[n][2];
    int licznik = 0;

    @Override
    public void update(double[][] coordinates) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                this.coordinates[i][j] = coordinates[i][j];
            }
        }

        System.out.println(SwingUtilities.isEventDispatchThread());

        System.out.println(GraphPanel.getHeight());

        System.out.println(licznik + ". Aktualizuję współrzędne    ");
        licznik++;
        invalidate();
        validate();
        repaint();
        try {
            TimeUnit.MILLISECONDS.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(VisualisationPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
     @Override
    public void actionPerformed(ActionEvent e) {
        if (start) {
            for (int i = 0; i < n; i++) {
                if (xw < coordinates[i][0]) {
                    xw = coordinates[i][0];
                }
                if (yw < coordinates[i][1]) {
                    yw = coordinates[i][1];
                }

                int xmax = GraphPanel.getWidth();
                int ymax = GraphPanel.getHeight();

                for (int it = 0; it < n; it++) {
                    coordinates2D[it][0] = (xmax / 2) + ((coordinates[it][0] / abs(xw)) * (xmax / 2));
                    coordinates2D[it][1] = (ymax / 2) - ((coordinates[it][1] / abs(yw)) * (ymax / 2));
                    // System.out.println("Konwertuję współrzędne: x=\"" + coordinates2D[it][0] + "\"" + "  y=\"" + coordinates2D[it][1] + "\"");
                }

                //System.out.println("test");
            }
            
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        System.out.println("test");
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) GraphPanel.getGraphics();

        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, GraphPanel.getWidth(), GraphPanel.getHeight());
        g2d.setColor(Color.BLACK);
        drawCircle(g2d);

    }
    
  
    private void drawCircle(Graphics2D g2d) {
        int x, y;
        for (int i = 0; i < n; i++) {
            x = (int) coordinates2D[i][0];
            y = (int) coordinates2D[i][1];
            Ellipse2D.Double circle = new Ellipse2D.Double(x, y, 10, 10);
            g2d.fill(circle);
        }
    }

    public VisualisationPanel() {
        initComponents();
    }

    public VisualisationPanel(Nbody nbody) {
        initComponents();
        coordinates = new double[n][3];
        this.nbody = nbody;

    }

    public void stopObserve() {
        nbody.removeObserver(this);
    }

    /**
     * Creates new form VisualisationPanel
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GraphPanel = new javax.swing.JPanel();
        StartButton = new javax.swing.JButton();

        GraphPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout GraphPanelLayout = new javax.swing.GroupLayout(GraphPanel);
        GraphPanel.setLayout(GraphPanelLayout);
        GraphPanelLayout.setHorizontalGroup(
            GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        GraphPanelLayout.setVerticalGroup(
            GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        StartButton.setText("Start");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(GraphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(GraphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(484, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed

        start = true;
        int dt = timeStep;
        int pt = duration;
        System.out.println(this.GraphPanel.getHeight() + "  " + this.GraphPanel.getWidth());
        nbody.addObserver(this);
        
        
        //SwingUtilities.invokeLater(new Runnable() {
           // public void run() {
                nbody.findPosition("data.txt", "results.txt", 20, 1000);
            //}
        //});


    }//GEN-LAST:event_StartButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GraphPanel;
    private javax.swing.JButton StartButton;
    // End of variables declaration//GEN-END:variables

   

}
